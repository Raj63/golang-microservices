// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.19.4
// source: invoices.proto

package api

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InvoiceStatus
type InvoiceStatusEnum_InvoiceStatus int32

const (
	InvoiceStatusEnum_DRAFT    InvoiceStatusEnum_InvoiceStatus = 0 // This will be considered as default value when a Invoice is created.
	InvoiceStatusEnum_OPEN     InvoiceStatusEnum_InvoiceStatus = 1 // Represents the Invoice is open for bidding.
	InvoiceStatusEnum_FILLED   InvoiceStatusEnum_InvoiceStatus = 2 // Represents the invoice is filled.
	InvoiceStatusEnum_LOCKED   InvoiceStatusEnum_InvoiceStatus = 3 // Represents the invoice is locked.
	InvoiceStatusEnum_APPROVED InvoiceStatusEnum_InvoiceStatus = 4 // Represents the invoice is approved.
)

// Enum value maps for InvoiceStatusEnum_InvoiceStatus.
var (
	InvoiceStatusEnum_InvoiceStatus_name = map[int32]string{
		0: "DRAFT",
		1: "OPEN",
		2: "FILLED",
		3: "LOCKED",
		4: "APPROVED",
	}
	InvoiceStatusEnum_InvoiceStatus_value = map[string]int32{
		"DRAFT":    0,
		"OPEN":     1,
		"FILLED":   2,
		"LOCKED":   3,
		"APPROVED": 4,
	}
)

func (x InvoiceStatusEnum_InvoiceStatus) Enum() *InvoiceStatusEnum_InvoiceStatus {
	p := new(InvoiceStatusEnum_InvoiceStatus)
	*p = x
	return p
}

func (x InvoiceStatusEnum_InvoiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvoiceStatusEnum_InvoiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_invoices_proto_enumTypes[0].Descriptor()
}

func (InvoiceStatusEnum_InvoiceStatus) Type() protoreflect.EnumType {
	return &file_invoices_proto_enumTypes[0]
}

func (x InvoiceStatusEnum_InvoiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvoiceStatusEnum_InvoiceStatus.Descriptor instead.
func (InvoiceStatusEnum_InvoiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{15, 0}
}

type CreateInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number      string                          `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Description string                          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      InvoiceStatusEnum_InvoiceStatus `protobuf:"varint,4,opt,name=status,proto3,enum=api.InvoiceStatusEnum_InvoiceStatus" json:"status,omitempty"`
	Amount      *Money                          `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CreateInvoiceRequest) Reset() {
	*x = CreateInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceRequest) ProtoMessage() {}

func (x *CreateInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{0}
}

func (x *CreateInvoiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateInvoiceRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CreateInvoiceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateInvoiceRequest) GetStatus() InvoiceStatusEnum_InvoiceStatus {
	if x != nil {
		return x.Status
	}
	return InvoiceStatusEnum_DRAFT
}

func (x *CreateInvoiceRequest) GetAmount() *Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

type InvoiceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number      string                          `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Description string                          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      InvoiceStatusEnum_InvoiceStatus `protobuf:"varint,4,opt,name=status,proto3,enum=api.InvoiceStatusEnum_InvoiceStatus" json:"status,omitempty"`
	Amount      *Money                          `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	CreatedAt   *timestamppb.Timestamp          `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InvoiceReply) Reset() {
	*x = InvoiceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceReply) ProtoMessage() {}

func (x *InvoiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceReply.ProtoReflect.Descriptor instead.
func (*InvoiceReply) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{1}
}

func (x *InvoiceReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvoiceReply) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *InvoiceReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InvoiceReply) GetStatus() InvoiceStatusEnum_InvoiceStatus {
	if x != nil {
		return x.Status
	}
	return InvoiceStatusEnum_DRAFT
}

func (x *InvoiceReply) GetAmount() *Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InvoiceReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InvoiceReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInvoiceRequest) Reset() {
	*x = GetInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceRequest) ProtoMessage() {}

func (x *GetInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{2}
}

func (x *GetInvoiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetIssuerBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIssuerBalanceRequest) Reset() {
	*x = GetIssuerBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuerBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuerBalanceRequest) ProtoMessage() {}

func (x *GetIssuerBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuerBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetIssuerBalanceRequest) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{3}
}

func (x *GetIssuerBalanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IssuerBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Wallet *Wallet `protobuf:"bytes,2,opt,name=wallet,proto3,oneof" json:"wallet,omitempty"`
}

func (x *IssuerBalanceReply) Reset() {
	*x = IssuerBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerBalanceReply) ProtoMessage() {}

func (x *IssuerBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerBalanceReply.ProtoReflect.Descriptor instead.
func (*IssuerBalanceReply) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{4}
}

func (x *IssuerBalanceReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IssuerBalanceReply) GetWallet() *Wallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type GetInvestorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paging *Pagination `protobuf:"bytes,1,opt,name=paging,proto3,oneof" json:"paging,omitempty"`
}

func (x *GetInvestorsRequest) Reset() {
	*x = GetInvestorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvestorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvestorsRequest) ProtoMessage() {}

func (x *GetInvestorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvestorsRequest.ProtoReflect.Descriptor instead.
func (*GetInvestorsRequest) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{5}
}

func (x *GetInvestorsRequest) GetPaging() *Pagination {
	if x != nil {
		return x.Paging
	}
	return nil
}

type InvestorsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Investors []*Investor `protobuf:"bytes,1,rep,name=investors,proto3" json:"investors,omitempty"`
}

func (x *InvestorsReply) Reset() {
	*x = InvestorsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestorsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestorsReply) ProtoMessage() {}

func (x *InvestorsReply) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestorsReply.ProtoReflect.Descriptor instead.
func (*InvestorsReply) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{6}
}

func (x *InvestorsReply) GetInvestors() []*Investor {
	if x != nil {
		return x.Investors
	}
	return nil
}

type PlaceBidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceId  string `protobuf:"bytes,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	InvestorId string `protobuf:"bytes,2,opt,name=investor_id,json=investorId,proto3" json:"investor_id,omitempty"`
	BidAmount  *Money `protobuf:"bytes,3,opt,name=bid_amount,json=bidAmount,proto3" json:"bid_amount,omitempty"`
}

func (x *PlaceBidRequest) Reset() {
	*x = PlaceBidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBidRequest) ProtoMessage() {}

func (x *PlaceBidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBidRequest.ProtoReflect.Descriptor instead.
func (*PlaceBidRequest) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{7}
}

func (x *PlaceBidRequest) GetInvoiceId() string {
	if x != nil {
		return x.InvoiceId
	}
	return ""
}

func (x *PlaceBidRequest) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *PlaceBidRequest) GetBidAmount() *Money {
	if x != nil {
		return x.BidAmount
	}
	return nil
}

type BidReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BidReply) Reset() {
	*x = BidReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidReply) ProtoMessage() {}

func (x *BidReply) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidReply.ProtoReflect.Descriptor instead.
func (*BidReply) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{8}
}

type ApproveTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceId string `protobuf:"bytes,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (x *ApproveTradeRequest) Reset() {
	*x = ApproveTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTradeRequest) ProtoMessage() {}

func (x *ApproveTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTradeRequest.ProtoReflect.Descriptor instead.
func (*ApproveTradeRequest) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{9}
}

func (x *ApproveTradeRequest) GetInvoiceId() string {
	if x != nil {
		return x.InvoiceId
	}
	return ""
}

type ApproveTradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveTradeReply) Reset() {
	*x = ApproveTradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveTradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTradeReply) ProtoMessage() {}

func (x *ApproveTradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTradeReply.ProtoReflect.Descriptor instead.
func (*ApproveTradeReply) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{10}
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Currency  string                 `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance   int64                  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{11}
}

func (x *Wallet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Wallet) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Wallet) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Wallet) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Wallet) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Investor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Vat       string                 `protobuf:"bytes,3,opt,name=vat,proto3" json:"vat,omitempty"`
	Wallet    *Wallet                `protobuf:"bytes,4,opt,name=wallet,proto3,oneof" json:"wallet,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Investor) Reset() {
	*x = Investor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Investor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Investor) ProtoMessage() {}

func (x *Investor) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Investor.ProtoReflect.Descriptor instead.
func (*Investor) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{12}
}

func (x *Investor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Investor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Investor) GetVat() string {
	if x != nil {
		return x.Vat
	}
	return ""
}

func (x *Investor) GetWallet() *Wallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *Investor) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Investor) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{13}
}

func (x *Pagination) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Money message for implementing Fowler Money pattern.
type Money struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount   int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Money) Reset() {
	*x = Money{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{14}
}

func (x *Money) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Money) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type InvoiceStatusEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvoiceStatusEnum) Reset() {
	*x = InvoiceStatusEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invoices_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceStatusEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceStatusEnum) ProtoMessage() {}

func (x *InvoiceStatusEnum) ProtoReflect() protoreflect.Message {
	mi := &file_invoices_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceStatusEnum.ProtoReflect.Descriptor instead.
func (*InvoiceStatusEnum) Descriptor() ([]byte, []int) {
	return file_invoices_proto_rawDescGZIP(), []int{15}
}

var File_invoices_proto protoreflect.FileDescriptor

var file_invoices_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e,
	0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x49, 0x44, 0x20, 0x69,
	0x6e, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x59, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x20, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x52, 0x46,
	0x2d, 0x30, 0x30, 0x31, 0x37, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x32, 0x49, 0x54, 0x68, 0x65, 0x20, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x44, 0x52,
	0x41, 0x46, 0x54, 0x2c, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x2c, 0x20, 0x46, 0x49, 0x4c, 0x4c, 0x45,
	0x44, 0x2c, 0x20, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x2c, 0x20, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x44, 0x2e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x54,
	0x68, 0x65, 0x20, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x87, 0x05, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92,
	0x41, 0x20, 0x32, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20,
	0x49, 0x44, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x54, 0x68, 0x65,
	0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x20, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x3a, 0x20, 0x52, 0x46, 0x2d, 0x30, 0x30, 0x31, 0x37, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x54, 0x68, 0x65,
	0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x32, 0x49, 0x54,
	0x68, 0x65, 0x20, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x3a, 0x20, 0x44, 0x52, 0x41, 0x46, 0x54, 0x2c, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x2c, 0x20, 0x46,
	0x49, 0x4c, 0x4c, 0x45, 0x44, 0x2c, 0x20, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x2c, 0x20, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x2e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x42, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x32, 0x19, 0x54, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x54, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61,
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x54, 0x68,
	0x65, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x48, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20,
	0x32, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x69, 0x6e, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x32, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20,
	0x69, 0x6e, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x54, 0x68, 0x65,
	0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x75,
	0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46,
	0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x32, 0x17, 0x54, 0x68, 0x65, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x22, 0x69, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14,
	0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x5a, 0x0a, 0x0e,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x20, 0x49, 0x44, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x49, 0x44, 0x20, 0x69, 0x6e, 0x20, 0x75,
	0x75, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x54, 0x68,
	0x65, 0x20, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x09, 0x62, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x42, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x59,
	0x0a, 0x13, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e,
	0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x49, 0x44, 0x20, 0x69,
	0x6e, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x86,
	0x03, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x54, 0x68, 0x65, 0x20,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x20, 0x49, 0x44, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x75, 0x69,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x49, 0x53, 0x4f, 0x20, 0x34, 0x32, 0x31, 0x37, 0x20, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x20, 0x75, 0x6e, 0x69, 0x74,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x62, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x74, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61,
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf8, 0x03, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x20, 0x49, 0x44, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0x54,
	0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x52, 0x69, 0x63, 0x68, 0x61, 0x72,
	0x64, 0x20, 0x52, 0x65, 0x69, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x03,
	0x76, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30,
	0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x74,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x20, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x54, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x62, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x74, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61,
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x22, 0x7a, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x32, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x54,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7f,
	0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16,
	0x49, 0x53, 0x4f, 0x20, 0x34, 0x32, 0x31, 0x37, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x20, 0x75, 0x6e, 0x69,
	0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5f, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x22, 0x4a, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x04,
	0x32, 0xe9, 0x08, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x7c, 0x92, 0x41, 0x62, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x35, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x2a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4a, 0x10, 0x0a, 0x03, 0x32, 0x30, 0x31,
	0x12, 0x09, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x71, 0x92, 0x41,
	0x5a, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x35, 0x47, 0x65, 0x74,
	0x20, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x62, 0x79, 0x20, 0x49,
	0x44, 0x2e, 0x2a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4a, 0x0b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12,
	0xc0, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x7e, 0x92, 0x41, 0x5c, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x35, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x20,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x20, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x2a, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a,
	0x02, 0x4f, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x1a, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7d,
	0x92, 0x41, 0x5f, 0x0a, 0x07, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12, 0x35, 0x47, 0x65,
	0x74, 0x20, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x62, 0x79, 0x20,
	0x49, 0x44, 0x2e, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02,
	0x4f, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xb4, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x75, 0x92,
	0x41, 0x5d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x47,
	0x65, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x62, 0x79,
	0x20, 0x49, 0x44, 0x2e, 0x2a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x73, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x69,
	0x64, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x74, 0x92, 0x41, 0x5e, 0x0a, 0x04, 0x42, 0x69, 0x64,
	0x73, 0x12, 0x39, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x62, 0x69, 0x64, 0x20, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x62,
	0x79, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x2a, 0x09, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x42, 0x69, 0x64, 0x73, 0x4a, 0x10, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x09,
	0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a,
	0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x64, 0x73, 0x42, 0x07, 0x5a, 0x05,
	0x2e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_invoices_proto_rawDescOnce sync.Once
	file_invoices_proto_rawDescData = file_invoices_proto_rawDesc
)

func file_invoices_proto_rawDescGZIP() []byte {
	file_invoices_proto_rawDescOnce.Do(func() {
		file_invoices_proto_rawDescData = protoimpl.X.CompressGZIP(file_invoices_proto_rawDescData)
	})
	return file_invoices_proto_rawDescData
}

var file_invoices_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_invoices_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_invoices_proto_goTypes = []interface{}{
	(InvoiceStatusEnum_InvoiceStatus)(0), // 0: api.InvoiceStatusEnum.InvoiceStatus
	(*CreateInvoiceRequest)(nil),         // 1: api.CreateInvoiceRequest
	(*InvoiceReply)(nil),                 // 2: api.InvoiceReply
	(*GetInvoiceRequest)(nil),            // 3: api.GetInvoiceRequest
	(*GetIssuerBalanceRequest)(nil),      // 4: api.GetIssuerBalanceRequest
	(*IssuerBalanceReply)(nil),           // 5: api.IssuerBalanceReply
	(*GetInvestorsRequest)(nil),          // 6: api.GetInvestorsRequest
	(*InvestorsReply)(nil),               // 7: api.InvestorsReply
	(*PlaceBidRequest)(nil),              // 8: api.PlaceBidRequest
	(*BidReply)(nil),                     // 9: api.BidReply
	(*ApproveTradeRequest)(nil),          // 10: api.ApproveTradeRequest
	(*ApproveTradeReply)(nil),            // 11: api.ApproveTradeReply
	(*Wallet)(nil),                       // 12: api.Wallet
	(*Investor)(nil),                     // 13: api.Investor
	(*Pagination)(nil),                   // 14: api.Pagination
	(*Money)(nil),                        // 15: api.Money
	(*InvoiceStatusEnum)(nil),            // 16: api.InvoiceStatusEnum
	(*timestamppb.Timestamp)(nil),        // 17: google.protobuf.Timestamp
}
var file_invoices_proto_depIdxs = []int32{
	0,  // 0: api.CreateInvoiceRequest.status:type_name -> api.InvoiceStatusEnum.InvoiceStatus
	15, // 1: api.CreateInvoiceRequest.amount:type_name -> api.Money
	0,  // 2: api.InvoiceReply.status:type_name -> api.InvoiceStatusEnum.InvoiceStatus
	15, // 3: api.InvoiceReply.amount:type_name -> api.Money
	17, // 4: api.InvoiceReply.created_at:type_name -> google.protobuf.Timestamp
	17, // 5: api.InvoiceReply.updated_at:type_name -> google.protobuf.Timestamp
	12, // 6: api.IssuerBalanceReply.wallet:type_name -> api.Wallet
	14, // 7: api.GetInvestorsRequest.paging:type_name -> api.Pagination
	13, // 8: api.InvestorsReply.investors:type_name -> api.Investor
	15, // 9: api.PlaceBidRequest.bid_amount:type_name -> api.Money
	17, // 10: api.Wallet.created_at:type_name -> google.protobuf.Timestamp
	17, // 11: api.Wallet.updated_at:type_name -> google.protobuf.Timestamp
	12, // 12: api.Investor.wallet:type_name -> api.Wallet
	17, // 13: api.Investor.created_at:type_name -> google.protobuf.Timestamp
	17, // 14: api.Investor.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 15: api.InvoicesService.CreateInvoice:input_type -> api.CreateInvoiceRequest
	3,  // 16: api.InvoicesService.GetInvoice:input_type -> api.GetInvoiceRequest
	10, // 17: api.InvoicesService.ApproveTrade:input_type -> api.ApproveTradeRequest
	4,  // 18: api.InvoicesService.GetIssuerBalance:input_type -> api.GetIssuerBalanceRequest
	6,  // 19: api.InvoicesService.GetInvestors:input_type -> api.GetInvestorsRequest
	8,  // 20: api.InvoicesService.PlaceBid:input_type -> api.PlaceBidRequest
	2,  // 21: api.InvoicesService.CreateInvoice:output_type -> api.InvoiceReply
	2,  // 22: api.InvoicesService.GetInvoice:output_type -> api.InvoiceReply
	11, // 23: api.InvoicesService.ApproveTrade:output_type -> api.ApproveTradeReply
	5,  // 24: api.InvoicesService.GetIssuerBalance:output_type -> api.IssuerBalanceReply
	7,  // 25: api.InvoicesService.GetInvestors:output_type -> api.InvestorsReply
	9,  // 26: api.InvoicesService.PlaceBid:output_type -> api.BidReply
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_invoices_proto_init() }
func file_invoices_proto_init() {
	if File_invoices_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_invoices_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuerBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuerBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvestorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestorsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveTradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Investor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Money); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invoices_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceStatusEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_invoices_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_invoices_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_invoices_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_invoices_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_invoices_proto_goTypes,
		DependencyIndexes: file_invoices_proto_depIdxs,
		EnumInfos:         file_invoices_proto_enumTypes,
		MessageInfos:      file_invoices_proto_msgTypes,
	}.Build()
	File_invoices_proto = out.File
	file_invoices_proto_rawDesc = nil
	file_invoices_proto_goTypes = nil
	file_invoices_proto_depIdxs = nil
}
